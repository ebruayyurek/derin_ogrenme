{
  
    
        "post0": {
            "title": "Olasılık",
            "content": "Makine Öğrenmesi tamamen tahminler üretme işidir. Örneğin klinik geçmişi göz önüne alındığında, bir hastanın gelecek yıl kalp krizi geçirme olasılığını tahmin etmek isteyebiliriz. Anormallik tespitinde, bir uçağın jet motorundan gelen bir dizi okumanın normal çalışma için ne kadar olası olduğunu değerlendirmek isteyebiliriz. Pekiştirmeli öğrenmede, robotun ya da daha genel olarak etmenin bir ortamda akıllıca davranmasını isteriz. Bunun anlamı, mevcut eylemlerin her biri altında yüksek bir ödül alma olasılığını düşünmemiz gerektiğidir. Tavsiye sistemleri inşa ettiğimizde de olasılıkları düşünmemiz gerekir. Örneğin, büyük bir online kitapçı için çalıştığımızı varsayalım. Belirli bir kullanıcının belirli bir kitabı satın alma olasılığını tahmin etmek isteyebiliriz. Tüm bu durumlar için olasılık dilini kullanmalıyız. Bir çok kurs, ana bilim dalları, tezler, kariyerler ve hatta bölümler olasılık bilimine üzerine kurulmuştur. Doğal olarak, bu bölümdeki amacımız tüm olasılık konularını öğretmek değildir. Bunun yerine sıfırdan, size ilk derin öğrenme modellerinizi oluşturmaya başlayabileceğiniz kadar olasılık bilgisi öğretmeyi ve isterseniz konunun kendi kendinize keşfetmeye başlayabileceğiniz kadarlık özünü kavratmak istiyoruz. . Açık açık ifade etmesek veya somut örnekler vermesek de, önceki bölümlerde olaslığı kullandık. Şimdi ilk örneğimizle başlayaşım: kedi ve köpekleri fotoğraflardan ayırt etmek. Bu basit gelebilir ama aslında zor bir problemdir. Sorunun zorluğu ilk planda görüntünün çözünürlüğüne bağlı olabilir. . . Şekilde görüldüğü gibi, $160 times 160$ piksel çözünürlüğe sahip resimlerde kedi ve köpekleri seçmek bizim için kolay olsa da, $40 times 40$ piksel için zor hata $10 times 10$ piksel için imkansızdır. Diğer bir ifadeyle, uzaklaştıkça yani çözünürlük azaldıkça kedi ve köpek resimlerini ayırt etmemiz yazı-tura atmaya dönüşmeye başlar. Olasılık sayesinde belirsizlik düzeyini matematiksel olarak ifade edebiliriz. Eğer resmim kedi resmi olduğundan tam olarak eminsek, resme karşılık gelen $y$ etiketinin &quot;kedi&quot; olma olasılığı yani $P(y=$ &quot;kedi&quot;$)$ ifadesi $1$ sayısına eşittir deriz. Fakat $y =$ &quot;kedi&quot; veya that $y =$ &quot;köpek&quot; diyebilmek için herhangi bir bulgu yok ise, olasılıkların eşit olduğunu söyler ve bunu $P(y=$ &quot;kedi&quot;$) = P(y=$ &quot;köpek&quot;$) = 0.5$ şeklinde gösteririz. Eğer resmin kedi resminden olduğu yüksek ihtimal ise fakat kesin emin değilsek, olasılığı $0.5 &lt; P(y=$ &quot;kedi&quot;$) &lt; 1$ gibi bir değer olarak tahmin ederiz. . Şimdi diğer bir örnek verelim. Hava durumu izleme verilerinden yarın İstanbul&#39;da yağmur yağma olaslığını tahmin etmek istiyoruz. Yaz aylarındaysak yağmur yaklaşık 0.5 olasılıkla yağar. . İki örnekte de bir şeyin alacağı değerle ilgileniyoruz. Ayrıca ikisinde de sonuçtan kesin emin değiliz. Fakat iki durum arasında kritik bir farklılık var. İlk durumda resim ya kedidir ya da köpektir ve hangisi olduğunu kesin bilmiyoruz. İkinci durumda sonuç rastgele bir olay gibi görülebilir. Dolayısıyla olasılık, belirsizliğin esnek dilidir ve birçok farklı durumda etkin bir şekilde kullanılabilir. . Temel Olas&#305;l&#305;k Kuram&#305; . Bir zar atalım ve gelen sayının 1 rakamı olma ihtimalini hesaplayalım. Eğer düzgün bir zar ise, 1&#39;den 6&#39;ya kadar olan tüm sonuçlar aynı şansa sahiptir ve dolayısıyla altıda bir oranında 1 rakamı gelir. Daha matematiksel olarak, 1 gelme olasılığının $ frac{1}{6}$ olduğunu söyleriz. . Fabirakadan yeni çıkmış bir zarın düzgün mü değil mi olduğunu öğrenmek isteyebiliriz. Bunu öğrenmenin tek yolu zarı defalarca atmak ve sonuçları kaydetmektir. Her atışta 1 ile 6 arasında bir sonuç elde ederiz. Bu sonuçlardan her bir rakamın olasılığını bulalım. . En basit yol her bir rakamın kaç defa geldiğini saymak ve bunu toplam atış sayısına oranlamaktır. Bu süreç belirlediğimiz olay için (mesela 1 gelmesi olayı) olasığı tahmin etmemizi sağlar. İstatistikteki Büyük Sayılar Yasası gereği, daha çok zar attıkça elde ettiğimiz oranlar gerçek olasılığa doğru yaklaşır. Ayrıntıya girmden önce bir deneme yapalım. . Önce gerekli olan kütüphaneleri yükleyelim. . !pip install d2l==0.13.2 -f https://d2l.ai/whl.html # installing d2l !pip install -U mxnet-cu101mkl==1.6.0 # updating mxnet to at least v1.6 . Şimdi de kullanacağımız araçları ve paket programları çağıralım. . %matplotlib inline from d2l import mxnet as d2l from mxnet import np, npx import random npx.set_np() . Şimdi zar atma işini programla yapmak istiyoruz. İstatistikte buna olasılık dağılımından örneklem alma denir. Belli sayıda seçeneğe karşılık gelen olasılıkları veren dağılıma çokterimli dağılım (multinomial distribution) denir. İleride dağılım kavramı daha net açıklanacaktır ama şimdilik bunu olaylara olasılık eşleme olarak düşünebilirsiniz. . MXNet ile çokterimli dağılımdan örneklem almak için np.random.multinomial fonksiyonunu kullanıyoruz. Bu fonksiyonu farklı şekillerde yükleyip kullanabilirsiniz, biz en kolayını tercih edeceğiz. . Öncelikle np.random.multinomial fonksiyonunun verdiği vektörü ele alalım. Bu vektörün bileşenleri, bu blieşene karşılık gelen sonucun kaç defa elde edildiğini gösterir. Mesela zar atmada, $6$ bileşenli bir vektör vardır ve ilk bileşen $1$ rakamının kaç defa geldiğini, benzer şekilde $i$ bileşeni $i$ sonucunun kaç defa geldiğini gösterir. . Zarı 1 defa atalım. . fair_probs = [1.0 / 6] * 6 np.random.multinomial(1, fair_probs) . array([0, 0, 0, 1, 0, 0], dtype=int64) . Bunu defalarca çalıştırırsanız her seferinde rastgele sonuçlar elde edersiniz. Zarın düzgün olu olmadığını anlamak için bu dağılımdan birçok örneklem almalıyız. Mesela 10 zar atmak için for döngüsü yerine aşağıdakini kullanırız ve birbirinden bağımsız 10 sonucu aynı anda elde etmiş oluruz. . np.random.multinomial(10, fair_probs) . array([1, 1, 5, 1, 1, 1], dtype=int64) . Ayrıca bu deneyi örneği aynı anda 3 defa yapabiliriz. . counts = np.random.multinomial(10, fair_probs, size=3) counts . array([[1, 2, 1, 2, 4, 0], [3, 2, 2, 1, 0, 2], [1, 2, 1, 3, 1, 2]], dtype=int64) . Şimdi zarı 1000 defa atalım ve herbir sonucun gelme oranının bulalım. Bu sayede olasılıkları tahmin etmiş olacağız. . # Sonuçları 32 bit boyutunda ondalıklı bilgisayar sayıları olarak kaydedelim. counts = np.random.multinomial(1000, fair_probs).astype(np.float32) counts / 1000 # Oranlar . array([0.164, 0.153, 0.181, 0.163, 0.163, 0.176]) . Düzgün bir zardan örneklem aldığımız için herbir sonucun gerçek olasılığının $ frac{1}{6}$ veya yaklaşık $0.167$ olduğunu biliyoruz. Dolayısıyla tahminimiz oldukça iyi görünüyor. . Bu tahminlerin örneklem boyutu ve sayısı arttıkça gerçek olasılığa nasıl yaklaştığını görselleştirelim. Örneklem boyutu 10 olan 500 deneyin sonuçlarının gerçek olasılığa nasıl yaklaştığını görelim. . counts = np.random.multinomial(10, fair_probs, size=500) cum_counts = counts.astype(np.float32).cumsum(axis=0) estimates = cum_counts / cum_counts.sum(axis=1, keepdims=True) d2l.set_figsize((6, 4.5)) for i in range(6): d2l.plt.plot(estimates[:, i].asnumpy(), label=(&quot;P(zar=&quot; + str(i + 1) + &quot;)&quot;)) d2l.plt.axhline(y=0.167, color=&#39;black&#39;, linestyle=&#39;dashed&#39;) d2l.plt.gca().set_xlabel(&#39;Deney sayısı&#39;) d2l.plt.gca().set_ylabel(&#39;Olasılık Tahmini&#39;) d2l.plt.legend(); . &lt;!DOCTYPE svg PUBLIC &quot;-//W3C//DTD SVG 1.1//EN&quot; &quot;http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd&quot;&gt; Yukarıdaki şekilde sürekli eğriler zarın herbir yüzüne karşılık gelen olasılık tahmininin deney sayısına göre değişimini veriyor. Kesikli çizgi de gerçek olasılığı gösteriyor ve görüldüğü gibi sürekli eğriler buna doğru yaklaşıyor. . Olas&#305;l&#305;k Kuram&#305;n&#305;n Aksiyomlar&#305; . Zar atma ile ilgili çalışırken $ mathcal{S} = {1, 2, 3, 4, 5, 6 }$ kümesine öneklem uzayı, herbir elemana çıktı veya sonuç diyoruz. Bazı sonuçlardan oluşan bir kümeye olay denir. Örneğin $5$ gelmesi yani $ {5 }$ olayı veya tek sayı gelmesi yani $ {1, 3, 5 }$ olayı gibi. Eğer gözlem sonucu $ mathcal{A}$ kümesinde yer alıyorsa bu $ mathcal{A}$ olayı gerçeklşmiş olur. Mesala eğer zar $3$ gelmiş ise, tek sayı gelmesi olayı gerçekleşmiş olur çünkü $3 in {1, 3, 5 }$ sağlanır. . Matematiksel olarak olasılık, kümelere reel sayı karşılık getiren bir fonksiyon olarak tanımlanır. $ mathcal{S}$ örneklem uzayındaki bir $ mathcal{A}$ olayının olasılığı $P( mathcal{A})$ ile gösterilir ve aşağıdaki özellikleri sağlar. . Herhangi bir $ mathcal{A}$ olayının olasılığı negatif olamaz, yani $P( mathcal{A}) geq 0$; | Örneklem uzayının olasılığı $1$ olmalıdır, yani $P( mathcal{S}) = 1$; | Karşılıklı ayrık olan yani $i neq j$ için $ mathcal{A}_i cap mathcal{A}_j = emptyset$ biçimindeki sayılabilir çoklukta $ mathcal{A}_1, mathcal{A}_2, ldots$ olayları için herhangi birisinin gerçekleşmesi olasılığı olasılıklarının toplamına eşittir, yani $P( bigcup_{i=1}^{ infty} mathcal{A}_i) = sum_{i=1}^{ infty} P( mathcal{A}_i)$. | . Bunlara olasılık kuramının aksiyomları denir ve Kolmogorov tarafından 1930&#39;da tanımlanmıştır. Bu sağlam temeller sayesinde rastgelelik ile ilgili felsefi tartışmalardan kurtulup matematiksel araçlarla çalışabilir ve yeni sonuçlar elde edebiliriz. Mesela $ mathcal{A}_1$ olayını örneklem uzayının tamamı ve diğer her $i &gt; 1$ için $ mathcal{A}_i = emptyset$ olarak alırsak, $P( emptyset) = 0$ buluruz, yani boş kümenin olasılığı sıfırdır. . Rassal De&#287;i&#351;kenler . Zar atma deneyinde rassal değişken (random variable) kavramını kullandık. Rassal değişken herhangi bir tür çokluk olabilir ve belirgin (deterministic) değildir. Deneydeki mümkün olan tüm değerleri alabilir. Mesela $X$ rassal değişkeni zar atma deneyindeki $ mathcal{S} = {1, 2, 3, 4, 5, 6 }$ örneklem uzayında değerler alsın. Zarın $5$ gelmesi olayını $ {X = 5 }$ veya $X = 5$ şeklinde olasılığını da $P( {X = 5 })$ veya $P(X = 5)$ ile gösterebiliriz. $P(X = a)$ ile $X$ rassal değişkeni ve onun aldığı $a$ değerini ayrı ayrı belirtmiş oluyoruz. Ancak bu gösterim uzun olacağından, $P(X)$ ile $X$ rassal değişkeninin dağılımını (distribution), $P(a)$ ile de $a$ değerini alma olasılığını göstereceğiz. Benzer şekilde rassal değişkenin belli bir aralıkta değerler alma olasılığını da belirtebiliriz. Örneğin $P(1 leq X leq 3)$ ile $X$ rassal değişkeninin $ {1, 2, 3 }$ değerlerini alma ihtimalini gösteriyoruz. . Zarın üzerindeki rakamlar gibi ayrık rassal değişkenler ile bir insanın boyu gibi sürekli rassal değişkenler arasında önemli bir fark vardır. İki kişinin tam olarak aynı boyda olması pek mümkün değildir. Eğer çok hassas bir uzunluk ölçme aracımız olsaydı, dünyada her kişinin boyunun diğerlerinden farklı olduğunu görürdük. Dolayısıyla bir kişinin boyunun örneğin 1.80139278291028719210196740527486202 metre olma ihtimalini hiçbir zaman sorgulamayız. Dünya nüfusu alındığında bile bu ihtimal sıfırdır. Burada bir kişinin boyunun belirlenen bir aralıkta olma ihtimali anlamlı olur, mesela 1.79 ile 1.81 metre arası gibi. Böyle sürekli rassal değikenlerde herbir değerin yoğunluk (density) olarak olasığı değrlendirilir. Mesela 1.80 metrenin olasılığı sıfırdır ama yoğunluğu sıfırdan büyük bir sayıdır. Bir aralıkta olasılık ise sıfırdan farklı bir değer alabilir. Bu bölümde kesikli rassal değişkenler kullanılacaktır, sürekli rassal değikenlerin olasılığı için Rassal Değişkenler bölümüne bakınız. . Rassal De&#287;i&#351;kenlerin Birbiriyle &#304;li&#351;kileri . Genellikle birden fazla rassal değişkeni bir arada inceleriz. Örneğin Grip ile öksürük gibi belli bir hastalık ile bir belirtinin hastalarda ayrı ayrı ve bir arada görülmesi olasılıkları üzerinden ilişkileri incelenebilir. Bu sayede daha etkin tedavi için çıkarımlar yaılabilir. . Daha karmaşık bir örnek olarak milyonlarca ikselden oluşan resimleri ele alalım. Piksellerin renk değerleri birer rassal değişken olarak görülebilir. Ayrıca resimleri belirten etiketler, yer, konum gibi diğer veriler de birer rassal değişken olarak düşünülebilir. Tüm bu rassal değişkenler bir arada yer alr. Rassal değişkenlerin bir birlerine göre durumlarını incelerken birçok nicelik kullanırız, şimdi bunları görelim. . Ortak Olas&#305;l&#305;k (Joint Probability) . İlkine ortak olasılık denir ve $P(A = a, B=b)$ ile gösterilir. Belli $a$ ve $b$ değerleri için ortak olasılık bize aynı anda $A=a$ ve $B=b$ olması olasılığını verir. Burada her $a$ ve $b$ için $P(A=a, B=b) leq P(A=a)$ olur. Çünkü aynı anda $A=a$ ve $B=b$ olması için ayrı ayrı $A=a$ olmalı ve $B=b$ olmalıdır. Dolayısıyla herbirinin ayrı ayrı olması birlikte olmalarından daha muhtemeldir. . &#350;artl&#305; Olas&#305;l&#305;k (Conditional Probability) . Yukarıdaki eşitsizlikten dolayı $0 leq frac{P(A=a, B=b)}{P(A=a)} leq 1$ elde edilir. Bu orana şartlı olasılık denir ve $P(B=b mid A=a)$ ile gösterilir. Anlamı da, $A=a$ durumunda $B=b$ olması olasılığıdır. . Bayes Teoremi . Şartlı olasılık tanımını kullanarak İstatistiğin en önemli ve gerekli denklemlerinden birisini, yani Bayes Teoremi elde edilebilir. Şöyle ki, tanımdan çarpım kuralı yani $P(A, B) = P(B mid A) P(A)$ elde edilir. $P(A, B)=P(B, A)$ olduğundan aynı zamanda $P(A, B) = P(A mid B) P(B)$ yazılabilir. $P(B) &gt; 0$ kabul edilerek ve sadeleştirmeyle . $$P(A mid B) = frac{P(B mid A) P(A)}{P(B)}$$ . olur. Yukarıda $P(A, B)$ gösteimi ile belirtilen dağılıma ortak dağılım, $P(A mid B)$ ile gösterilen dağılıma da şartlı dağılım denir. Bu dağılımların özel olarak $A = a, B=b$ için değerleri hesaplanabilir. . Ay&#305;rma (Marginalization) . Bayes Teoremi bir şeyden diğeri için çıkarım yapmada çok yararlıdır. Neden-sonuç ilişkisi gibi durumlarda nasıl kullanılacağını sonraki bölümlerde göreceğiz. Bunun için ayırma işlemine ihtiyacımız var. Bu işlem ile $P(A, B)$ yardımıyla $P(B)$ elde edilmektedir. $B$ rassal değişkeninin olasılığı, $A$ rassal değişkeninin alabileceği her değer için ortak olasılıkların toplamıdır. Buna toplam kuralı denir ve . $$P(B) = sum_{A} P(A, B)$$ . biçiminde formülleştirilir. Ayırma sonucunda elde edilen olasılığa ya da bunun dağılımına marjinal olasılık ya da marjinal dağılım denir. . Ba&#287;&#305;ms&#305;zl&#305;k (Independence) . Rassal değişkenler arasında bakılan bir diğer özellik de bağımlılık ya da tersi bağımsızlık durumudur. $A$ ve $B$ gibi iki rassal değişkenin bağımsız olması, $B$ rassal değişkeninin aldığı değerlerin $A$ için herhangi bir bilgi ortaya koymaması olarak özetlenebilir. Bu durumda $P(B mid A) = P(B)$ olur. İstatistikçiler bağımsızlığı $A perp B$ ile gösterir. Bayes Toeremi gereği P(A mid B) = P(A)$ elde edilir. Diğer hallerde $A$ ve $B$ bağımlıdır. Örneğin iki zarın arka arkaya atılması bağımsız rassal değişkenler verir. Bununla birlikte bir odadaki elektrik düğmesi ile odanın aydınlık olması bağımlıdır. (Elektrik düğmesinin açık olması aydınlık olacağını kesin gerektirmez çünkü düğme bozu olabilir ya da elektrikler kesilebilir.) . $P(A mid B) = frac{P(A, B)}{P(B)} = P(A)$ eşitliğiyle ile $P(A, B) = P(A)P(B)$ eşitliği birbirine denk olduğundan, iki rassal değişkenin bağımsız olması ortak dağılımın bunların dağılımlarının çarpımına eşit olması ile aynı şeydir. Benzer şekilde $A$ ve $B$ rassal değişkenleri $C$ rassal değikenine göre şartlı bağımsızlık tanımı $P(A, B mid C) = P(A mid C)P(B mid C)$ olarak verilebilir ve $A perp B mid C$ biçiminde gösterilir. . Uygulamalar . Şimdi öğrensiklerimizi sınayalım. Bir doktor hastasına AIDS testi uyguluyor. Bu test oldukça güvenilir ve sağlam bir kişiyi AIDS hastası göstermesi olasılığı %1. Hatta HIV virüsü taşıyan bir kişiyi tesit etmede kesinlikle hata yapmıyor. $D_1$ ile teşhisi gösterirelim, yani pozitif teşhis için $1$, negatif teşhis için $0$ değerini alsın. $H$ ile de HIV virüsü taşımayı gösterelim, dolayısıyla HIV pozitif için $1$, HIV negatif için $0$ değeri alsın. Aşağıdaki tablo eldeki verileri özetler. . Şartlı Olasılık $H=1$ $H=0$ . $P(D_1 = 1 mid H)$ | 1 | 0.01 | . $P(D_1 = 0 mid H)$ | 0 | 0.99 | . Note that the column sums are all 1 (but the row sums are not), since the conditional probability needs to sum up to 1, just like the probability. Let us work out the probability of the patient having AIDS if the test comes back positive, i.e., $P(H = 1 mid D_1 = 1)$. Obviously this is going to depend on how common the disease is, since it affects the number of false alarms. Assume that the population is quite healthy, e.g., $P(H=1) = 0.0015$. To apply Bayes&#39; theorem, we need to apply marginalization and the multiplication rule to determine . $$ begin{aligned} &amp;P(D_1 = 1) =&amp; P(D_1=1, H=0) + P(D_1=1, H=1) =&amp; P(D_1=1 mid H=0) P(H=0) + P(D_1=1 mid H=1) P(H=1) =&amp; 0.011485. end{aligned} $$Thus, we get . $$ begin{aligned} &amp;P(H = 1 mid D_1 = 1) =&amp; frac{P(D_1=1 mid H=1) P(H=1)}{P(D_1=1)} =&amp; 0.1306 end{aligned}.$$In other words, there is only a 13.06% chance that the patient actually has AIDS, despite using a very accurate test. As we can see, probability can be counterintuitive. . What should a patient do upon receiving such terrifying news? Likely, the patient would ask the physician to administer another test to get clarity. The second test has different characteristics and it is not as good as the first one, as shown in :numref:conditional_prob_D2. . :Conditional probability of $P(D_2 mid H)$. . Conditional probability $H=1$ $H=0$ . $P(D_2 = 1 mid H)$ | 0.98 | 0.03 | . $P(D_2 = 0 mid H)$ | 0.02 | 0.97 | . :label:conditional_prob_D2 . Unfortunately, the second test comes back positive, too. Let us work out the requisite probabilities to invoke Bayes&#39; theorem by assuming the conditional independence: . $$ begin{aligned} &amp;P(D_1 = 1, D_2 = 1 mid H = 0) =&amp; P(D_1 = 1 mid H = 0) P(D_2 = 1 mid H = 0) =&amp; 0.0003, end{aligned} $$$$ begin{aligned} &amp;P(D_1 = 1, D_2 = 1 mid H = 1) =&amp; P(D_1 = 1 mid H = 1) P(D_2 = 1 mid H = 1) =&amp; 0.98. end{aligned} $$Now we can apply marginalization and the multiplication rule: . $$ begin{aligned} &amp;P(D_1 = 1, D_2 = 1) =&amp; P(D_1 = 1, D_2 = 1, H = 0) + P(D_1 = 1, D_2 = 1, H = 1) =&amp; P(D_1 = 1, D_2 = 1 mid H = 0)P(H=0) + P(D_1 = 1, D_2 = 1 mid H = 1)P(H=1) =&amp; 0.00176955. end{aligned} $$In the end, the probability of the patient having AIDS given both positive tests is . $$ begin{aligned} &amp;P(H = 1 mid D_1 = 1, D_2 = 1) =&amp; frac{P(D_1 = 1, D_2 = 1 mid H=1) P(H=1)}{P(D_1 = 1, D_2 = 1)} =&amp; 0.8307. end{aligned} $$That is, the second test allowed us to gain much higher confidence that not all is well. Despite the second test being considerably less accurate than the first one, it still significantly improved our estimate. . Beklenen De&#287;er ve Varyans (Expectation and Variance) . To summarize key characteristics of probability distributions, we need some measures. The expectation (or average) of the random variable $X$ is denoted as . $$E[X] = sum_{x} x P(X = x).$$ . When the input of a function $f(x)$ is a random variable drawn from the distribution $P$ with different values $x$, the expectation of $f(x)$ is computed as . $$E_{x sim P}[f(x)] = sum_x f(x) P(x).$$ . In many cases we want to measure by how much the random variable $X$ deviates from its expectation. This can be quantified by the variance . $$ mathrm{Var}[X] = E left[(X - E[X])^2 right] = E[X^2] - E[X]^2.$$Its square root is called the standard deviation. The variance of a function of a random variable measures by how much the function deviates from the expectation of the function, as different values $x$ of the random variable are sampled from its distribution: . $$ mathrm{Var}[f(x)] = E left[ left(f(x) - E[f(x)] right)^2 right].$$ . &#214;zet . We can sample from probability distributions. | We can analyze multiple random variables using joint distribution, conditional distribution, Bayes&#39; theorem, marginalization, and independence assumptions. | Expectation and variance offer useful measures to summarize key characteristics of probability distributions. | . Al&#305;&#351;t&#305;rmalar . We conducted $m=500$ groups of experiments where each group draws $n=10$ samples. Vary $m$ and $n$. Observe and analyze the experimental results. | Given two events with probability $P( mathcal{A})$ and $P( mathcal{B})$, compute upper and lower bounds on $P( mathcal{A} cup mathcal{B})$ and $P( mathcal{A} cap mathcal{B})$. (Hint: display the situation using a Venn Diagram.) | Assume that we have a sequence of random variables, say $A$, $B$, and $C$, where $B$ only depends on $A$, and $C$ only depends on $B$, can you simplify the joint probability $P(A, B, C)$? (Hint: this is a Markov Chain.) | In :numref:subsec_probability_hiv_app, the first test is more accurate. Why not just run the first test a second time? | Discussions .",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/02/22/olasilik.html",
            "relUrl": "/jupyter/2020/02/22/olasilik.html",
            "date": " • Feb 22, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "PyTorch",
            "content": "De&#287;i&#351;kenler . Variables are containers for holding data and they&#39;re defined by a name and value. . # Integer variable x = 5 print (x) print (type(x)) . 5 &lt;class &#39;int&#39;&gt; . We can change the value of a variable by simply assigning a new value to it. . # String variable x = &quot;hello&quot; print (x) print (type(x)) . hello &lt;class &#39;str&#39;&gt; . There are many different types of variables: integers, floats, strings, boolean etc. . # int variable x = 5 print (x, type(x)) . 5 &lt;class &#39;int&#39;&gt; . # float variable x = 5.0 print (x, type(x)) . 5.0 &lt;class &#39;float&#39;&gt; . # text variable x = &quot;5&quot; print (x, type(x)) . 5 &lt;class &#39;str&#39;&gt; . # boolean variable x = True print (x, type(x)) . True &lt;class &#39;bool&#39;&gt; . We can also do operations with variables. . # Variables can be used with each other a = 1 b = 2 c = a + b print (c) . 3 . We should always know what types of variables we&#39;re dealing with so we can do the right operations with them. Here&#39;s a common mistake that can happen if we&#39;re using the wrong variable type. . # int variables a = 5 b = 3 print (a + b) . 8 . # string variables a = &quot;5&quot; b = &quot;3&quot; print (a + b) . 53 . Lists . Lists are an ordered, mutable (changeable) collection of values that are comma separated and enclosed by square brackets. A list can be comprised of many different types of variables (below is a list with an integer, string and a float). . # Creating a list x = [3, &quot;hello&quot;, 1.2] print (x) . [3, &#39;hello&#39;, 1.2] . # Length of a list len(x) . 3 . You can add to a list by using the append function. . # Adding to a list x.append(7) print (x) print (len(x)) . [3, &#39;hello&#39;, 1.2, 7] 4 . # Replacing items in a list x[1] = &quot;bye&quot; print (x) . [3, &#39;bye&#39;, 1.2, 7] . # Operations y = [2.4, &quot;world&quot;] z = x + y print (z) . [3, &#39;bye&#39;, 1.2, 7, 2.4, &#39;world&#39;] . Indexing and Slicing . Indexing and slicing from lists allow us to retrieve specific values within lists. Note that indices can be positive (starting from 0) or negative (-1 and lower, where -1 is the last item in the list). . # Indexing x = [3, &quot;hello&quot;, 1.2] print (&quot;x[0]: &quot;, x[0]) print (&quot;x[1]: &quot;, x[1]) print (&quot;x[-1]: &quot;, x[-1]) # the last item print (&quot;x[-2]: &quot;, x[-2]) # the second to last item . x[0]: 3 x[1]: hello x[-1]: 1.2 x[-2]: hello . # Slicing print (&quot;x[:]: &quot;, x[:]) # all indices print (&quot;x[1:]: &quot;, x[1:]) # index 1 to the end of the list print (&quot;x[1:2]: &quot;, x[1:2]) # index 1 to index 2 (not including index 2) print (&quot;x[:-1]: &quot;, x[:-1]) # index 0 to last index (not including last index) . x[:]: [3, &#39;hello&#39;, 1.2] x[1:]: [&#39;hello&#39;, 1.2] x[1:2]: [&#39;hello&#39;] x[:-1]: [3, &#39;hello&#39;] . Tuples . Tuples are collections that are ordered and immutable (unchangeable). You will use these to store values that will never be changed. . # Creating a tuple x = (3.0, &quot;hello&quot;) # tuples start and end with () print (x) . (3.0, &#39;hello&#39;) . # Adding values to a tuple x = x + (5.6, 4) print (x) . (3.0, &#39;hello&#39;, 5.6, 4) . # Try to change (it won&#39;t work and you&#39;ll get an error) x[0] = 1.2 . TypeError Traceback (most recent call last) &lt;ipython-input-19-d0da6f639f74&gt; in &lt;module&gt;() -&gt; 1 x[0] = 1.2 TypeError: &#39;tuple&#39; object does not support item assignment . Dictionaries . Dictionaries are an unordered, mutable and indexed collection of key-value pairs. You can retrieve values based on the key and a dictionary cannot have two of the same keys. . # Creating a dictionary person = {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;brown&#39;} print (person) print (person[&#39;name&#39;]) print (person[&#39;eye_color&#39;]) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;brown&#39;} Goku brown . # Changing the value for a key person[&#39;eye_color&#39;] = &#39;green&#39; print (person) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;green&#39;} . # Adding new key-value pairs person[&#39;age&#39;] = 24 print (person) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;green&#39;, &#39;age&#39;: 24} . # Length of a dictionary print (len(person)) . 3 . If statements . We can use if statements to conditionally do something. The conditions are defined by the words if, elif (which stands for else if) and else. We can have as many elif statements as we want. The indented code below each condition is the code that will execute if the condition is True. . # If statement x = 4 if x &lt; 1: score = &#39;low&#39; elif x &lt;= 4: # elif = else if score = &#39;medium&#39; else: score = &#39;high&#39; print (score) . medium . # If statement with a boolean x = True if x: print (&quot;it worked&quot;) . it worked . Loops . For Loops . A for loop can iterate over a collection of values (lists, tuples, dictionaries, etc.) The indented code is executed for each item in the collection of values. . # For loop veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: print (veggie) . carrots broccoli beans . When the loop encounters the break command, the loop will terminate immediately. If there were more items in the list, they will not be processed. . # `break` from a for loop veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: if veggie == &quot;broccoli&quot;: break print (veggie) . carrots . When the loop encounters the continue command, the loop will skip all other operations for that item in the list only. If there were more items in the list, the loop will continue normally. . # `continue` to the next iteration veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: if veggie == &quot;broccoli&quot;: continue print (veggie) . carrots beans . While Loops . A while loop can perform repeatedly as long as a condition is True. We can use continue and break commands in while loops as well. . # While loop x = 3 while x &gt; 0: x -= 1 # same as x = x - 1 print (x) . 2 1 0 . Functions . Functions are a way to modularize reusable pieces of code. They&#39;re defined by the keyword def which stands for definition and they can have the following components. . # Define the function def add_two(x): &quot;&quot;&quot;Increase x by 2.&quot;&quot;&quot; # explains what this function will do x += 2 return x . Here are the components that may be required when we want to use the function. we need to ensure that the function name and the input parameters match with how we defined the function above. . # Use the function score = 0 new_score = add_two(x=score) print (new_score) . 2 . A function can have as many input parameters and outputs as we want. . # Function with multiple inputs def join_name(first_name, last_name): &quot;&quot;&quot;Combine first name and last name.&quot;&quot;&quot; joined_name = first_name + &quot; &quot; + last_name return joined_name . # Use the function first_name = &quot;Goku&quot; last_name = &quot;Mohandas&quot; joined_name = join_name(first_name=first_name, last_name=last_name) print (joined_name) . Goku Mohandas . NOTE: It&#39;s good practice to always use keyword argument when using a function so that it&#39;s very clear what input variable belongs to what function input parameter. On a related note, you will often see the terms *args and **kwargs which stand for arguments and keyword arguments. You can extract them when they are passed into a function. The significance of the * is that any number of arguments and keyword arguments can be passed into the function. . def f(*args, **kwargs): x = args[0] y = kwargs.get(&#39;y&#39;) print (f&quot;x: {x}, y: {y}&quot;) . f(5, y=2) . x: 5, y: 2 . Classes . Classes are object constructors and are a fundamental component of object oriented programming in Python. They are composed of a set of functions that define the class and it&#39;s operations. . __init__() function . The init function is used when an instance of the class is initialized. . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . &lt;__main__.Pet object at 0x7fe487e9c358&gt; Scooby . __str()__ function . The print (my_dog) command printed something not so relevant to us. Let&#39;s fix that with the __str()__ function. . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name def __str__(self): &quot;&quot;&quot;Output when printing an instance of a Pet.&quot;&quot;&quot; return f&quot;{self.species} named {self.name}&quot; . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . dog named Scooby Scooby . NOTE: Classes can be customized with magic functions like, __str__, to enable powerful operations. We&#39;ll be exploring additional built-in functions in subsequent notebooks (like __iter__ and __getitem__) but if you&#39;re curious, here is a tutorial on more magic methods. . Object methods . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name def __str__(self): &quot;&quot;&quot;Output when printing an instance of a Pet.&quot;&quot;&quot; return f&quot;{self.species} named {self.name}&quot; def change_name(self, new_name): &quot;&quot;&quot;Change the name of your Pet.&quot;&quot;&quot; self.name = new_name . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . dog named Scooby Scooby . # Using a class&#39;s function my_dog.change_name(new_name=&quot;Scrappy&quot;) print (my_dog) print (my_dog.name) . dog named Scrappy Scrappy . Inheritance . Inheritance allows you to inherit all the properties and methods from another class (the parent). Notice how we inherited the initialized variables from the parent Pet class like species and name. We also inherited the change_name function. But for the __str__ function, we define our own version to overwrite the Pet class&#39; __str__ function. . class Dog(Pet): def __init__(self, species, name, breed): super().__init__(&quot;dog&quot;, name) self.breed = breed def __str__(self): return f&quot;{self.breed} named {self.name}&quot; . scooby = Dog(species=&quot;dog&quot;, breed=&quot;Great Dane&quot;, name=&quot;Scooby&quot;) print (scooby) . Great Dane named Scooby . scooby.change_name(&#39;Scooby Doo&#39;) print (scooby) . Great Dane named Scooby Doo . Decorators . Recall that functions allow us to modularize code and reuse them. However, we&#39;ll often want to add some functionality before or after the main function executes and we may want to do this for many different functions. Instead of adding more code to the original function, we can use decorators! . decorators: augment a function with pre/post-processing. Decorators wrap around the main function and allow us to operate on the inputs and or outputs. | . Suppose we have a function called operations which increments the input value x by 1. . def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations(x=1) . 2 . Now let&#39;s say we want to increment our input x by 1 before and after the operations function executes and, to illustrate this example, let&#39;s say the increments have to be separate steps. Here&#39;s how we would do it by changing the original code: . def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 x += 1 x += 1 return x . operations(x=1) . 4 . We were able to achieve what we want but we now increased the size of our operations function and if we want to do the same incrementation for any other function, we have to add the same code to all of those as well ... not very efficient. To solve this, let&#39;s create a decorator called add which increments x by 1 before and after the main function f executes. . Creating a decorator function . The decorator function accepts a function f which is the function we wish to wrap around (in our case, it&#39;s operations). The output of the decorator is its wrapper function which receives the arguments and keyword arguments passed to function f. . Inside the wrapper function, we can extract the input parameters [line 5] passed to function f and make any changes we want [line 6]. Then the function f is executed [line 7] and then we can make changes to the outputs as well [line 8]. Finally, the wrapper function will return some value(s) [line 9] which is what the decorator returns as well since it returns wrapper. . # Decorator def add(f): def wrapper(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) # .get() if not altering x x += 1 # executes before function f x = f(*args, **kwargs, x=x) x += 1 # executes after function f return x return wrapper . We can use this decorator by simply adding it to the top of our main function preceded by the @ symbol. . @add def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations(x=1) . 4 . Suppose we wanted to debug and see what function actually executed with operations. . operations.__name__, operations.__doc__ . (&#39;wrapper&#39;, &#39;Wrapper function for @add.&#39;) . The function name and docstring are not what we&#39;re looking for but it appears this way because the wrapper function is what was executed. In order to fix this, Python offers functools.wraps which carries the main function&#39;s metadata. . from functools import wraps . # Decorator def add(f): @wraps(f) def wrap(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) x += 1 x = f(*args, **kwargs, x=x) x += 1 return x return wrap . @add def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations.__name__, operations.__doc__ . (&#39;operations&#39;, &#39;Basic operations.&#39;) . Awesome! We were able to decorate our main function operation to achieve the customization we wanted without actually altering the function. We can reuse our decorator for other functions that may need the same customization! . This was a dummy example to show how decorators work but we&#39;ll be using them heavily during our production ML lessons. A simple scenario would be using decorators to create uniform JSON responses from each API endpoint without including the bulky code in each endpoint. . Callbacks . Decorators allow for customized operations before and after the main function&#39;s execution but what about in between? Suppose we want to conditionally/situationally do some operations. Instead of writing a whole bunch of if-statements and make our functions bulky, we can use callbacks! . callbacks: conditional/situational processing within the function. | . Our callbacks will be classes that have functions with key names that will execute at various periods during the main function&#39;s execution. The function names are up to us but we need to invoke the same callback functions within our main function. . # Callback class x_tracker(object): def __init__(self, x): self.history = [] def at_start(self, x): self.history.append(x) def at_end(self, x): self.history.append(x) . We can pass in as many callbacks as we want and because they have appropriately named functions, they will be invoked at the appropriate times. . def operations(x, callbacks=[]): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; for callback in callbacks: callback.at_start(x) x += 1 for callback in callbacks: callback.at_end(x) return x . x = 1 tracker = x_tracker(x=x) operations(x=x, callbacks=[tracker]) . 2 . tracker.history . [1, 2] . Putting it all together . decorators + callbacks = powerful customization before, during and after the main function’s execution without increasing its complexity. We will be using this duo to create powerful ML training scripts that are highly customizable in future lessons. . from functools import wraps . # Decorator def add(f): @wraps(f) def wrap(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) # .get() if not altering x x += 1 # executes before function f x = f(*args, **kwargs, x=x) # can do things post function f as well return x return wrap . # Callback class x_tracker(object): def __init__(self, x): self.history = [x] def at_start(self, x): self.history.append(x) def at_end(self, x): self.history.append(x) . # Main function @add def operations(x, callbacks=[]): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; for callback in callbacks: callback.at_start(x) x += 1 for callback in callbacks: callback.at_end(x) return x . x = 1 tracker = x_tracker(x=x) operations(x=x, callbacks=[tracker]) . 3 . tracker.history . [1, 2, 3] . Additional resources . Python 3: This was a very quick look at Python but it&#39;s good enough for practical machine learning and we&#39;ll be learning more in future lessons. If you want to learn more, check out this free Python3 course. | . . Share and discover ML projects at Made With ML. . &nbsp; &nbsp;",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/02/05/PyTorch.html",
            "relUrl": "/jupyter/2020/02/05/PyTorch.html",
            "date": " • Feb 5, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "Python",
            "content": "De&#287;i&#351;kenler . Variables are containers for holding data and they&#39;re defined by a name and value. . # Integer variable x = 5 print (x) print (type(x)) . 5 &lt;class &#39;int&#39;&gt; . We can change the value of a variable by simply assigning a new value to it. . # String variable x = &quot;hello&quot; print (x) print (type(x)) . hello &lt;class &#39;str&#39;&gt; . There are many different types of variables: integers, floats, strings, boolean etc. . # int variable x = 5 print (x, type(x)) . 5 &lt;class &#39;int&#39;&gt; . # float variable x = 5.0 print (x, type(x)) . 5.0 &lt;class &#39;float&#39;&gt; . # text variable x = &quot;5&quot; print (x, type(x)) . 5 &lt;class &#39;str&#39;&gt; . # boolean variable x = True print (x, type(x)) . True &lt;class &#39;bool&#39;&gt; . We can also do operations with variables. . # Variables can be used with each other a = 1 b = 2 c = a + b print (c) . 3 . We should always know what types of variables we&#39;re dealing with so we can do the right operations with them. Here&#39;s a common mistake that can happen if we&#39;re using the wrong variable type. . # int variables a = 5 b = 3 print (a + b) . 8 . # string variables a = &quot;5&quot; b = &quot;3&quot; print (a + b) . 53 . Lists . Lists are an ordered, mutable (changeable) collection of values that are comma separated and enclosed by square brackets. A list can be comprised of many different types of variables (below is a list with an integer, string and a float). . # Creating a list x = [3, &quot;hello&quot;, 1.2] print (x) . [3, &#39;hello&#39;, 1.2] . # Length of a list len(x) . 3 . You can add to a list by using the append function. . # Adding to a list x.append(7) print (x) print (len(x)) . [3, &#39;hello&#39;, 1.2, 7] 4 . # Replacing items in a list x[1] = &quot;bye&quot; print (x) . [3, &#39;bye&#39;, 1.2, 7] . # Operations y = [2.4, &quot;world&quot;] z = x + y print (z) . [3, &#39;bye&#39;, 1.2, 7, 2.4, &#39;world&#39;] . Indexing and Slicing . Indexing and slicing from lists allow us to retrieve specific values within lists. Note that indices can be positive (starting from 0) or negative (-1 and lower, where -1 is the last item in the list). . # Indexing x = [3, &quot;hello&quot;, 1.2] print (&quot;x[0]: &quot;, x[0]) print (&quot;x[1]: &quot;, x[1]) print (&quot;x[-1]: &quot;, x[-1]) # the last item print (&quot;x[-2]: &quot;, x[-2]) # the second to last item . x[0]: 3 x[1]: hello x[-1]: 1.2 x[-2]: hello . # Slicing print (&quot;x[:]: &quot;, x[:]) # all indices print (&quot;x[1:]: &quot;, x[1:]) # index 1 to the end of the list print (&quot;x[1:2]: &quot;, x[1:2]) # index 1 to index 2 (not including index 2) print (&quot;x[:-1]: &quot;, x[:-1]) # index 0 to last index (not including last index) . x[:]: [3, &#39;hello&#39;, 1.2] x[1:]: [&#39;hello&#39;, 1.2] x[1:2]: [&#39;hello&#39;] x[:-1]: [3, &#39;hello&#39;] . Tuples . Tuples are collections that are ordered and immutable (unchangeable). You will use these to store values that will never be changed. . # Creating a tuple x = (3.0, &quot;hello&quot;) # tuples start and end with () print (x) . (3.0, &#39;hello&#39;) . # Adding values to a tuple x = x + (5.6, 4) print (x) . (3.0, &#39;hello&#39;, 5.6, 4) . # Try to change (it won&#39;t work and you&#39;ll get an error) x[0] = 1.2 . TypeError Traceback (most recent call last) &lt;ipython-input-19-d0da6f639f74&gt; in &lt;module&gt;() -&gt; 1 x[0] = 1.2 TypeError: &#39;tuple&#39; object does not support item assignment . Dictionaries . Dictionaries are an unordered, mutable and indexed collection of key-value pairs. You can retrieve values based on the key and a dictionary cannot have two of the same keys. . # Creating a dictionary person = {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;brown&#39;} print (person) print (person[&#39;name&#39;]) print (person[&#39;eye_color&#39;]) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;brown&#39;} Goku brown . # Changing the value for a key person[&#39;eye_color&#39;] = &#39;green&#39; print (person) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;green&#39;} . # Adding new key-value pairs person[&#39;age&#39;] = 24 print (person) . {&#39;name&#39;: &#39;Goku&#39;, &#39;eye_color&#39;: &#39;green&#39;, &#39;age&#39;: 24} . # Length of a dictionary print (len(person)) . 3 . If statements . We can use if statements to conditionally do something. The conditions are defined by the words if, elif (which stands for else if) and else. We can have as many elif statements as we want. The indented code below each condition is the code that will execute if the condition is True. . # If statement x = 4 if x &lt; 1: score = &#39;low&#39; elif x &lt;= 4: # elif = else if score = &#39;medium&#39; else: score = &#39;high&#39; print (score) . medium . # If statement with a boolean x = True if x: print (&quot;it worked&quot;) . it worked . Loops . For Loops . A for loop can iterate over a collection of values (lists, tuples, dictionaries, etc.) The indented code is executed for each item in the collection of values. . # For loop veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: print (veggie) . carrots broccoli beans . When the loop encounters the break command, the loop will terminate immediately. If there were more items in the list, they will not be processed. . # `break` from a for loop veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: if veggie == &quot;broccoli&quot;: break print (veggie) . carrots . When the loop encounters the continue command, the loop will skip all other operations for that item in the list only. If there were more items in the list, the loop will continue normally. . # `continue` to the next iteration veggies = [&quot;carrots&quot;, &quot;broccoli&quot;, &quot;beans&quot;] for veggie in veggies: if veggie == &quot;broccoli&quot;: continue print (veggie) . carrots beans . While Loops . A while loop can perform repeatedly as long as a condition is True. We can use continue and break commands in while loops as well. . # While loop x = 3 while x &gt; 0: x -= 1 # same as x = x - 1 print (x) . 2 1 0 . Functions . Functions are a way to modularize reusable pieces of code. They&#39;re defined by the keyword def which stands for definition and they can have the following components. . # Define the function def add_two(x): &quot;&quot;&quot;Increase x by 2.&quot;&quot;&quot; # explains what this function will do x += 2 return x . Here are the components that may be required when we want to use the function. we need to ensure that the function name and the input parameters match with how we defined the function above. . # Use the function score = 0 new_score = add_two(x=score) print (new_score) . 2 . A function can have as many input parameters and outputs as we want. . # Function with multiple inputs def join_name(first_name, last_name): &quot;&quot;&quot;Combine first name and last name.&quot;&quot;&quot; joined_name = first_name + &quot; &quot; + last_name return joined_name . # Use the function first_name = &quot;Goku&quot; last_name = &quot;Mohandas&quot; joined_name = join_name(first_name=first_name, last_name=last_name) print (joined_name) . Goku Mohandas . NOTE: It&#39;s good practice to always use keyword argument when using a function so that it&#39;s very clear what input variable belongs to what function input parameter. On a related note, you will often see the terms *args and **kwargs which stand for arguments and keyword arguments. You can extract them when they are passed into a function. The significance of the * is that any number of arguments and keyword arguments can be passed into the function. . def f(*args, **kwargs): x = args[0] y = kwargs.get(&#39;y&#39;) print (f&quot;x: {x}, y: {y}&quot;) . f(5, y=2) . x: 5, y: 2 . Classes . Classes are object constructors and are a fundamental component of object oriented programming in Python. They are composed of a set of functions that define the class and it&#39;s operations. . __init__() function . The init function is used when an instance of the class is initialized. . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . &lt;__main__.Pet object at 0x7fe487e9c358&gt; Scooby . __str()__ function . The print (my_dog) command printed something not so relevant to us. Let&#39;s fix that with the __str()__ function. . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name def __str__(self): &quot;&quot;&quot;Output when printing an instance of a Pet.&quot;&quot;&quot; return f&quot;{self.species} named {self.name}&quot; . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . dog named Scooby Scooby . NOTE: Classes can be customized with magic functions like, __str__, to enable powerful operations. We&#39;ll be exploring additional built-in functions in subsequent notebooks (like __iter__ and __getitem__) but if you&#39;re curious, here is a tutorial on more magic methods. . Object methods . # Creating the class class Pet(object): &quot;&quot;&quot;Class object for a pet.&quot;&quot;&quot; def __init__(self, species, name): &quot;&quot;&quot;Initialize a Pet.&quot;&quot;&quot; self.species = species self.name = name def __str__(self): &quot;&quot;&quot;Output when printing an instance of a Pet.&quot;&quot;&quot; return f&quot;{self.species} named {self.name}&quot; def change_name(self, new_name): &quot;&quot;&quot;Change the name of your Pet.&quot;&quot;&quot; self.name = new_name . # Creating an instance of a class my_dog = Pet(species=&quot;dog&quot;, name=&quot;Scooby&quot;) print (my_dog) print (my_dog.name) . dog named Scooby Scooby . # Using a class&#39;s function my_dog.change_name(new_name=&quot;Scrappy&quot;) print (my_dog) print (my_dog.name) . dog named Scrappy Scrappy . Inheritance . Inheritance allows you to inherit all the properties and methods from another class (the parent). Notice how we inherited the initialized variables from the parent Pet class like species and name. We also inherited the change_name function. But for the __str__ function, we define our own version to overwrite the Pet class&#39; __str__ function. . class Dog(Pet): def __init__(self, species, name, breed): super().__init__(&quot;dog&quot;, name) self.breed = breed def __str__(self): return f&quot;{self.breed} named {self.name}&quot; . scooby = Dog(species=&quot;dog&quot;, breed=&quot;Great Dane&quot;, name=&quot;Scooby&quot;) print (scooby) . Great Dane named Scooby . scooby.change_name(&#39;Scooby Doo&#39;) print (scooby) . Great Dane named Scooby Doo . Decorators . Recall that functions allow us to modularize code and reuse them. However, we&#39;ll often want to add some functionality before or after the main function executes and we may want to do this for many different functions. Instead of adding more code to the original function, we can use decorators! . decorators: augment a function with pre/post-processing. Decorators wrap around the main function and allow us to operate on the inputs and or outputs. | . Suppose we have a function called operations which increments the input value x by 1. . def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations(x=1) . 2 . Now let&#39;s say we want to increment our input x by 1 before and after the operations function executes and, to illustrate this example, let&#39;s say the increments have to be separate steps. Here&#39;s how we would do it by changing the original code: . def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 x += 1 x += 1 return x . operations(x=1) . 4 . We were able to achieve what we want but we now increased the size of our operations function and if we want to do the same incrementation for any other function, we have to add the same code to all of those as well ... not very efficient. To solve this, let&#39;s create a decorator called add which increments x by 1 before and after the main function f executes. . Creating a decorator function . The decorator function accepts a function f which is the function we wish to wrap around (in our case, it&#39;s operations). The output of the decorator is its wrapper function which receives the arguments and keyword arguments passed to function f. . Inside the wrapper function, we can extract the input parameters [line 5] passed to function f and make any changes we want [line 6]. Then the function f is executed [line 7] and then we can make changes to the outputs as well [line 8]. Finally, the wrapper function will return some value(s) [line 9] which is what the decorator returns as well since it returns wrapper. . # Decorator def add(f): def wrapper(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) # .get() if not altering x x += 1 # executes before function f x = f(*args, **kwargs, x=x) x += 1 # executes after function f return x return wrapper . We can use this decorator by simply adding it to the top of our main function preceded by the @ symbol. . @add def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations(x=1) . 4 . Suppose we wanted to debug and see what function actually executed with operations. . operations.__name__, operations.__doc__ . (&#39;wrapper&#39;, &#39;Wrapper function for @add.&#39;) . The function name and docstring are not what we&#39;re looking for but it appears this way because the wrapper function is what was executed. In order to fix this, Python offers functools.wraps which carries the main function&#39;s metadata. . from functools import wraps . # Decorator def add(f): @wraps(f) def wrap(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) x += 1 x = f(*args, **kwargs, x=x) x += 1 return x return wrap . @add def operations(x): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; x += 1 return x . operations.__name__, operations.__doc__ . (&#39;operations&#39;, &#39;Basic operations.&#39;) . Awesome! We were able to decorate our main function operation to achieve the customization we wanted without actually altering the function. We can reuse our decorator for other functions that may need the same customization! . This was a dummy example to show how decorators work but we&#39;ll be using them heavily during our production ML lessons. A simple scenario would be using decorators to create uniform JSON responses from each API endpoint without including the bulky code in each endpoint. . Callbacks . Decorators allow for customized operations before and after the main function&#39;s execution but what about in between? Suppose we want to conditionally/situationally do some operations. Instead of writing a whole bunch of if-statements and make our functions bulky, we can use callbacks! . callbacks: conditional/situational processing within the function. | . Our callbacks will be classes that have functions with key names that will execute at various periods during the main function&#39;s execution. The function names are up to us but we need to invoke the same callback functions within our main function. . # Callback class x_tracker(object): def __init__(self, x): self.history = [] def at_start(self, x): self.history.append(x) def at_end(self, x): self.history.append(x) . We can pass in as many callbacks as we want and because they have appropriately named functions, they will be invoked at the appropriate times. . def operations(x, callbacks=[]): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; for callback in callbacks: callback.at_start(x) x += 1 for callback in callbacks: callback.at_end(x) return x . x = 1 tracker = x_tracker(x=x) operations(x=x, callbacks=[tracker]) . 2 . tracker.history . [1, 2] . Putting it all together . decorators + callbacks = powerful customization before, during and after the main function’s execution without increasing its complexity. We will be using this duo to create powerful ML training scripts that are highly customizable in future lessons. . from functools import wraps . # Decorator def add(f): @wraps(f) def wrap(*args, **kwargs): &quot;&quot;&quot;Wrapper function for @add.&quot;&quot;&quot; x = kwargs.pop(&#39;x&#39;) # .get() if not altering x x += 1 # executes before function f x = f(*args, **kwargs, x=x) # can do things post function f as well return x return wrap . # Callback class x_tracker(object): def __init__(self, x): self.history = [x] def at_start(self, x): self.history.append(x) def at_end(self, x): self.history.append(x) . # Main function @add def operations(x, callbacks=[]): &quot;&quot;&quot;Basic operations.&quot;&quot;&quot; for callback in callbacks: callback.at_start(x) x += 1 for callback in callbacks: callback.at_end(x) return x . x = 1 tracker = x_tracker(x=x) operations(x=x, callbacks=[tracker]) . 3 . tracker.history . [1, 2, 3] . Additional resources . Python 3: This was a very quick look at Python but it&#39;s good enough for practical machine learning and we&#39;ll be learning more in future lessons. If you want to learn more, check out this free Python3 course. | . . Share and discover ML projects at Made With ML. . &nbsp; &nbsp;",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/02/01/Python.html",
            "relUrl": "/jupyter/2020/02/01/Python.html",
            "date": " • Feb 1, 2020"
        }
        
    
  
    
        ,"post3": {
            "title": "Numpy",
            "content": "Set up . import numpy as np . # Set seed for reproducibility np.random.seed(seed=1234) . Basics . Let&#39;s take a took at how to create tensors with NumPy. . Tensor: collection of values | . # Scalar x = np.array(6) # scalar print (&quot;x: &quot;, x) # Number of dimensions print (&quot;x ndim: &quot;, x.ndim) # Dimensions print (&quot;x shape:&quot;, x.shape) # Size of elements print (&quot;x size: &quot;, x.size) # Data type print (&quot;x dtype: &quot;, x.dtype) . x: 6 x ndim: 0 x shape: () x size: 1 x dtype: int64 . # Vector x = np.array([1.3 , 2.2 , 1.7]) print (&quot;x: &quot;, x) print (&quot;x ndim: &quot;, x.ndim) print (&quot;x shape:&quot;, x.shape) print (&quot;x size: &quot;, x.size) print (&quot;x dtype: &quot;, x.dtype) # notice the float datatype . x: [1.3 2.2 1.7] x ndim: 1 x shape: (3,) x size: 3 x dtype: float64 . # Matrix x = np.array([[1,2], [3,4]]) print (&quot;x: n&quot;, x) print (&quot;x ndim: &quot;, x.ndim) print (&quot;x shape:&quot;, x.shape) print (&quot;x size: &quot;, x.size) print (&quot;x dtype: &quot;, x.dtype) . x: [[1 2] [3 4]] x ndim: 2 x shape: (2, 2) x size: 4 x dtype: int64 . # 3-D Tensor x = np.array([[[1,2],[3,4]],[[5,6],[7,8]]]) print (&quot;x: n&quot;, x) print (&quot;x ndim: &quot;, x.ndim) print (&quot;x shape:&quot;, x.shape) print (&quot;x size: &quot;, x.size) print (&quot;x dtype: &quot;, x.dtype) . x: [[[1 2] [3 4]] [[5 6] [7 8]]] x ndim: 3 x shape: (2, 2, 2) x size: 8 x dtype: int64 . NumPy also comes with several functions that allow us to create tensors quickly. . # Functions print (&quot;np.zeros((2,2)): n&quot;, np.zeros((2,2))) print (&quot;np.ones((2,2)): n&quot;, np.ones((2,2))) print (&quot;np.eye((2)): n&quot;, np.eye((2))) # identity matrix print (&quot;np.random.random((2,2)): n&quot;, np.random.random((2,2))) . np.zeros((2,2)): [[0. 0.] [0. 0.]] np.ones((2,2)): [[1. 1.] [1. 1.]] np.eye((2)): [[1. 0.] [0. 1.]] np.random.random((2,2)): [[0.19151945 0.62210877] [0.43772774 0.78535858]] . Indexing . Keep in mind that when indexing the row and column, indices start at 0. And like indexing with lists, we can use negative indices as well (where -1 is the last item). . # Indexing x = np.array([1, 2, 3]) print (&quot;x: &quot;, x) print (&quot;x[0]: &quot;, x[0]) x[0] = 0 print (&quot;x: &quot;, x) . x: [1 2 3] x[0]: 1 x: [0 2 3] . # Slicing x = np.array([[1,2,3,4], [5,6,7,8], [9,10,11,12]]) print (x) print (&quot;x column 1: &quot;, x[:, 1]) print (&quot;x row 0: &quot;, x[0, :]) print (&quot;x rows 0,1 &amp; cols 1,2: n&quot;, x[0:2, 1:3]) . [[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] x column 1: [ 2 6 10] x row 0: [1 2 3 4] x rows 0,1 &amp; cols 1,2: [[2 3] [6 7]] . # Integer array indexing print (x) rows_to_get = np.array([0, 1, 2]) print (&quot;rows_to_get: &quot;, rows_to_get) cols_to_get = np.array([0, 2, 1]) print (&quot;cols_to_get: &quot;, cols_to_get) # Combine sequences above to get values to get print (&quot;indexed values: &quot;, x[rows_to_get, cols_to_get]) # (0, 0), (1, 2), (2, 1) . [[ 1 2 3 4] [ 5 6 7 8] [ 9 10 11 12]] rows_to_get: [0 1 2] cols_to_get: [0 2 1] indexed values: [ 1 7 10] . # Boolean array indexing x = np.array([[1, 2], [3, 4], [5, 6]]) print (&quot;x: n&quot;, x) print (&quot;x &gt; 2: n&quot;, x &gt; 2) print (&quot;x[x &gt; 2]: n&quot;, x[x &gt; 2]) . x: [[1 2] [3 4] [5 6]] x &gt; 2: [[False False] [ True True] [ True True]] x[x &gt; 2]: [3 4 5 6] . Arithmetic . # Basic math x = np.array([[1,2], [3,4]], dtype=np.float64) y = np.array([[1,2], [3,4]], dtype=np.float64) print (&quot;x + y: n&quot;, np.add(x, y)) # or x + y print (&quot;x - y: n&quot;, np.subtract(x, y)) # or x - y print (&quot;x * y: n&quot;, np.multiply(x, y)) # or x * y . x + y: [[2. 4.] [6. 8.]] x - y: [[0. 0.] [0. 0.]] x * y: [[ 1. 4.] [ 9. 16.]] . Dot product . One of the most common NumPy operations we’ll use in machine learning is matrix multiplication using the dot product. We take the rows of our first matrix (2) and the columns of our second matrix (2) to determine the dot product, giving us an output of [2 X 2]. The only requirement is that the inside dimensions match, in this case the first matrix has 3 columns and the second matrix has 3 rows. . # Dot product a = np.array([[1,2,3], [4,5,6]], dtype=np.float64) # we can specify dtype b = np.array([[7,8], [9,10], [11, 12]], dtype=np.float64) c = a.dot(b) print (f&quot;{a.shape} · {b.shape} = {c.shape}&quot;) print (c) . (2, 3) · (3, 2) = (2, 2) [[ 58. 64.] [139. 154.]] . Axis operations . We can also do operations across a specific axis. . # Sum across a dimension x = np.array([[1,2],[3,4]]) print (x) print (&quot;sum all: &quot;, np.sum(x)) # adds all elements print (&quot;sum axis=0: &quot;, np.sum(x, axis=0)) # sum across rows print (&quot;sum axis=1: &quot;, np.sum(x, axis=1)) # sum across columns . [[1 2] [3 4]] sum all: 10 sum axis=0: [4 6] sum axis=1: [3 7] . # Min/max x = np.array([[1,2,3], [4,5,6]]) print (&quot;min: &quot;, x.min()) print (&quot;max: &quot;, x.max()) print (&quot;min axis=0: &quot;, x.min(axis=0)) print (&quot;min axis=1: &quot;, x.min(axis=1)) . min: 1 max: 6 min axis=0: [1 2 3] min axis=1: [1 4] . Broadcasting . Here, we’re adding a vector with a scalar. Their dimensions aren’t compatible as is but how does NumPy still gives us the right result? This is where broadcasting comes in. The scalar is broadcast across the vector so that they have compatible shapes. . # Broadcasting x = np.array([1,2]) # vector y = np.array(3) # scalar z = x + y print (&quot;z: n&quot;, z) . z: [4 5] . Advanced . Transposing . We often need to change the dimensions of our tensors for operations like the dot product. If we need to switch two dimensions, we can transpose the tensor. . # Transposing x = np.array([[1,2,3], [4,5,6]]) print (&quot;x: n&quot;, x) print (&quot;x.shape: &quot;, x.shape) y = np.transpose(x, (1,0)) # flip dimensions at index 0 and 1 print (&quot;y: n&quot;, y) print (&quot;y.shape: &quot;, y.shape) . x: [[1 2 3] [4 5 6]] x.shape: (2, 3) y: [[1 4] [2 5] [3 6]] y.shape: (3, 2) . Reshaping . Sometimes, we&#39;ll need to alter the dimensions of the matrix. Reshaping allows us to transform a tensor into different permissible shapes -- our reshaped tensor has the same amount of values in the tensor. (1X6 = 2X3). We can also use -1 on a dimension and NumPy will infer the dimension based on our input tensor. . The way reshape works is by looking at each dimension of the new tensor and separating our original tensor into that many units. So here the dimension at index 0 of the new tensor is 2 so we divide our original tensor into 2 units, and each of those has 3 values. . # Reshaping x = np.array([[1,2,3,4,5,6]]) print (x) print (&quot;x.shape: &quot;, x.shape) y = np.reshape(x, (2, 3)) print (&quot;y: n&quot;, y) print (&quot;y.shape: &quot;, y.shape) z = np.reshape(x, (2, -1)) print (&quot;z: n&quot;, z) print (&quot;z.shape: &quot;, z.shape) . [[1 2 3 4 5 6]] x.shape: (1, 6) y: [[1 2 3] [4 5 6]] y.shape: (2, 3) z: [[1 2 3] [4 5 6]] z.shape: (2, 3) . Unintended reshaping . Though reshaping is very convenient to manipulate tensors, we must be careful of their pitfalls as well. Let&#39;s look at the example below. Suppose we have x, which has the shape [2 X 3 X 4]. . [[[ 1 1 1 1] [ 2 2 2 2] [ 3 3 3 3]] [[10 10 10 10] [20 20 20 20] [30 30 30 30]]] . We want to reshape x so that it has shape [3 X 8] which we&#39;ll get by moving the dimension at index 0 to become the dimension at index 1 and then combining the last two dimensions. But when we do this, we want our output . to look like: ✅ . [[ 1 1 1 1 10 10 10 10] [ 2 2 2 2 20 20 20 20] [ 3 3 3 3 30 30 30 30]] . and not like: ❌ . [[ 1 1 1 1 2 2 2 2] [ 3 3 3 3 10 10 10 10] [20 20 20 20 30 30 30 30]] . even though they both have the same shape [3X8]. . x = np.array([[[1, 1, 1, 1], [2, 2, 2, 2], [3, 3, 3, 3]], [[10, 10, 10, 10], [20, 20, 20, 20], [30, 30, 30, 30]]]) print (&quot;x: n&quot;, x) print (&quot;x.shape: &quot;, x.shape) . x: [[[ 1 1 1 1] [ 2 2 2 2] [ 3 3 3 3]] [[10 10 10 10] [20 20 20 20] [30 30 30 30]]] x.shape: (2, 3, 4) . When we naively do a reshape, we get the right shape but the values are not what we&#39;re looking for. . # Unintended reshaping z_incorrect = np.reshape(x, (x.shape[1], -1)) print (&quot;z_incorrect: n&quot;, z_incorrect) print (&quot;z_incorrect.shape: &quot;, z_incorrect.shape) . z_incorrect: [[ 1 1 1 1 2 2 2 2] [ 3 3 3 3 10 10 10 10] [20 20 20 20 30 30 30 30]] z_incorrect.shape: (3, 8) . Instead, if we transpose the tensor and then do a reshape, we get our desired tensor. Transpose allows us to put our two vectors that we want to combine together and then we use reshape to join them together. Always create a dummy example like this when you’re unsure about reshaping. Blindly going by the tensor shape can lead to lots of issues downstream. . # Intended reshaping y = np.transpose(x, (1,0,2)) print (&quot;y: n&quot;, y) print (&quot;y.shape: &quot;, y.shape) z_correct = np.reshape(y, (y.shape[0], -1)) print (&quot;z_correct: n&quot;, z_correct) print (&quot;z_correct.shape: &quot;, z_correct.shape) . y: [[[ 1 1 1 1] [10 10 10 10]] [[ 2 2 2 2] [20 20 20 20]] [[ 3 3 3 3] [30 30 30 30]]] y.shape: (3, 2, 4) z_correct: [[ 1 1 1 1 10 10 10 10] [ 2 2 2 2 20 20 20 20] [ 3 3 3 3 30 30 30 30]] z_correct.shape: (3, 8) . Adding/removing dimensions . We can also easily add and remove dimensions to our tensors and we&#39;ll want to do this to make tensors compatible for certain operations. . # Adding dimensions x = np.array([[1,2,3],[4,5,6]]) print (&quot;x: n&quot;, x) print (&quot;x.shape: &quot;, x.shape) y = np.expand_dims(x, 1) # expand dim 1 print (&quot;y: n&quot;, y) print (&quot;y.shape: &quot;, y.shape) # notice extra set of brackets are added . x: [[1 2 3] [4 5 6]] x.shape: (2, 3) y: [[[1 2 3]] [[4 5 6]]] y.shape: (2, 1, 3) . # Removing dimensions x = np.array([[[1,2,3]],[[4,5,6]]]) print (&quot;x: n&quot;, x) print (&quot;x.shape: &quot;, x.shape) y = np.squeeze(x, 1) # squeeze dim 1 print (&quot;y: n&quot;, y) print (&quot;y.shape: &quot;, y.shape) # notice extra set of brackets are gone . x: [[[1 2 3]] [[4 5 6]]] x.shape: (2, 1, 3) y: [[1 2 3] [4 5 6]] y.shape: (2, 3) . Additional resources . NumPy reference manual: We don&#39;t have to memorize anything here and we will be taking a closer look at NumPy in the later lessons. If you want to learn more checkout the NumPy reference manual. | . . Share and discover ML projects at Made With ML. . &nbsp; &nbsp;",
            "url": "https://unverciftci.github.io/derin_ogrenme/jupyter/2020/01/01/NumPy.html",
            "relUrl": "/jupyter/2020/01/01/NumPy.html",
            "date": " • Jan 1, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "Bilgi",
          "content": "Bu kitap Derin Öğrenme konusunda bazı temel konuları içermektedir. . Hata ve eklemeler için: unverciftci@gmail.com. .",
          "url": "https://unverciftci.github.io/derin_ogrenme/bilgi/",
          "relUrl": "/bilgi/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://unverciftci.github.io/derin_ogrenme/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}